name: 构建并发布Docker镜像

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  FRONTEND_IMAGE: ghcr.io/${{ github.repository }}/frontend
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend

jobs:
  build-and-push:
    name: 构建并推送Docker镜像到GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 检出代码
name: 构建并发布Docker镜像

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  FRONTEND_IMAGE: ghcr.io/${{ github.repository }}/frontend
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend

jobs:
  build-and-push:
    name: 构建并推送Docker镜像到GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
      
      # 设置 QEMU 和 Docker Buildx
      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # 只在打标签时登录到 GitHub Container Registry
      - name: 登录到 GHCR
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # 设置镜像标签
      - name: 提取镜像元数据
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.FRONTEND_IMAGE }}
            ${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
      
      # 构建并推送后端镜像
      - name: 构建并推送后端镜像
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # 构建并推送前端镜像
      - name: 构建并推送前端镜像
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # 在构建完成后显示镜像信息
      - name: 输出镜像信息
        run: |
          echo "### Docker镜像构建完成 :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
            echo "✅ 标签构建: 镜像已推送到GitHub Packages" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "前端镜像: \`${{ env.FRONTEND_IMAGE }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "后端镜像: \`${{ env.BACKEND_IMAGE }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ 分支构建或PR: 镜像仅构建但未推送" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "要推送镜像，请创建标签并推送。例如:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "git tag v1.0.0" >> $GITHUB_STEP_SUMMARY
            echo "git push origin v1.0.0" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi